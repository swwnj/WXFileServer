#daemon off;
#master_process off;
user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  debug;
error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  192.168.X.X;

        #charset koi8-r;

        access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
	location /static/ {
            set $gridfs_key "$arg_media_id";
       	    gridfs test
        	field=filename
        	type=string;
	    #error_page 404 /cgi-bin/media/get$args;
	    mongo 127.0.0.1:27017;
chunked_transfer_encoding off;
	}
	location /media/upload/ {
            set $gridfs_key "$arg_media_id";
       	    upload_gridfs test
        	field=_id
        	type=objectid;
            upload_mongo 127.0.0.1:27017;
	    client_max_body_size 2m;
	}
        location /media/size/ {
            if ($uri ~* "^/media/size/([0-9a-fA-F]{24})$") {
                set $gridfs_key $1;
            }
            gridfs test
                field=_id
                type=objectid;
	    mongo 127.0.0.1:27017;
	    image_filter size;
        }
	location /media/get {
            set $gridfs_key "$arg_media_id";
       	    gridfs test
        	field=filename
        	type=string;
            mongo 127.0.0.1:27017;
	}
        location /media/ {
            if ($uri ~* "^/media/([0-9a-fA-F]{24})$") {
                set $gridfs_key $1;
            }
            set $gridfs_media_id $arg_media_id;
            gridfs test
                field=_id
                type=objectid;
	    mongo 127.0.0.1:27017;
            gridfs_request /weixin/media/;
chunked_transfer_encoding off;
        }
    location /cgi-bin/media/redirect {
        rewrite ^/(.*) http://file.api.weixin.qq.com/cgi-bin/media/get break;
    }
    location /cgi-bin/media/ {
        if ($uri ~* "^/cgi-bin/media/([0-9a-fA-F]{24})$") {
            set $gridfs_key $1;
        }
        rewrite ^/(.*) /cgi-bin/media/get break;
        #proxy_set_header Host file.api.weixin.qq.com;
        proxy_pass http://file.api.weixin.qq.com;
        gridfs_filter $gridfs_key;
	mongo 127.0.0.1:27017;
    }
    location /weixin/media/ {
        memcached_pass 127.0.0.1:11211;
        memcached_value_flag 0;
        set $memcached_key $args;
        set $memcached_flags 1;
        set $memcached_exptime 600;
    }
    location /memcached/ {
        memcached_pass 127.0.0.1:11211;
        memcached_value_flag 1;
        set $memcached_key "$arg_key";
        set $memcached_flags "$arg_flags";
        set $memcached_exptime "$arg_exptime";
        set $memcached_unique "$arg_unique";
    }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
	    fastcgi_param  SCRIPT_FILENAME  /usr/local/nginx/html/$fastcgi_script_name;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
server {
    listen  81;
 
    location / {
        root  html;
    }
}

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
